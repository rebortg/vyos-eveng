---
# tasks file for eve-ng-create-node

- fail: msg="The variable 'node_template_iso' is empty"
  when: node_template_iso == ""

- fail: msg="The variable 'node_template_version' is empty"
  when: node_template_version == ""

- name: Login to EVE-NG and get Cookie
  delegate_to: localhost
  uri:
    method: POST
    url: "{{ EVE_NG_BASE_URL }}/api/auth/login"
    return_content: yes
    body_format: json
    body:
      username: "{{ EVE_NG_USER }}"
      password: "{{ EVE_NG_PASSWORD}}"
      html5: "-1"
    headers:
      Accept: application/json
    validate_certs: False
  register: login
  

- name: get template facts
  delegate_to: localhost
  uri:
    method: GET
    url: "{{ EVE_NG_BASE_URL }}/api/list/templates/{{ node_template_os }}"
    return_content: yes
    headers:
      Accept: application/json
      Cookie: "{{ login.cookies_string }}"
    validate_certs: False
  register: response


- name: Register path status
  stat:
    path: "/opt/unetlab/addons/qemu/{{ node_template_name }}"  
  register: path_status

- fail:
   msg: "/opt/unetlab/addons/qemu/{{ node_template_name }} exists"
  when: path_status.stat.exists == True


- name: create path
  file:
    path: "/opt/unetlab/addons/qemu/{{ node_template_name }}"  
    state: directory


- name: Download iso
  uri:
    url: "{{ node_template_iso }}"
    method: GET
    dest: "/opt/unetlab/addons/qemu/{{ node_template_name }}/cdrom.iso"

    
- name: create virtioa.qcow2 file
  ansible.builtin.shell: |
    /opt/qemu/bin/qemu-img create -f qcow2 /opt/unetlab/addons/qemu/{{ node_template_name }}/virtioa.qcow2 10G


- name: create lab for node install
  delegate_to: localhost
  uri:
    method: POST
    url: "{{ EVE_NG_BASE_URL }}/api/labs"
    return_content: True
    body_format: json
    body:
      path: "/"
      name: "{{ node_create_lab_name }}"
      sat: "-1"
    headers:
      Accept: application/json
      Cookie: "{{ login.cookies_string }}"
    validate_certs: False
  register: response


- name: open lab
  delegate_to: localhost
  uri:
    method: GET
    url: "{{ EVE_NG_BASE_URL }}/api/labs/{{ node_create_lab_name }}.unl"
    return_content: True
    headers:
      Accept: application/json
      Cookie: "{{ login.cookies_string }}"
    validate_certs: False
  register: response

- set_fact:
    lab_temp_id: "{{response.json.data.id}}"


- name: add node to lab
  delegate_to: localhost
  uri:
    method: POST
    url: "{{ EVE_NG_BASE_URL }}/api/labs/{{ node_create_lab_name }}.unl/nodes"
    return_content: True
    body_format: json
    status_code: 201
    body:
      type: "qemu"
      template: "{{ node_template_os }}"
      image: "{{ node_template_name }}"
      icon: "VyOS.png"
      left: "0"
      top: "0"
      count: "1"
      name: "VyOS"
      cpulimit: "undefined"
      cpu: "1"
      ram: "512"
      ethernet: "4"
      qemu_options: "-machine type=pc,accel=kvm -serial mon:stdio -nographic -no-user-config -nodefaults -rtc base=utc"
      ro_qemu_options: "-machine type=pc,accel=kvm -serial mon:stdio -nographic -no-user-config -nodefaults -rtc base=utc"
      config: "0"
      sat: "0"
      delay: "0"
      console: "telnet"
      postfix: 0
    headers:
      Accept: application/json
      Cookie: "{{ login.cookies_string }}"
    validate_certs: False
  register: response

- name: start node
  delegate_to: localhost
  uri:
    method: GET
    url: "{{ EVE_NG_BASE_URL }}/api/labs/{{ node_create_lab_name }}.unl/nodes/1/start"
    return_content: True
    headers:
      Accept: application/json
      Cookie: "{{ login.cookies_string }}"
    validate_certs: False
  register: response


- name: get node infos
  delegate_to: localhost
  uri:
    method: GET
    url: "{{ EVE_NG_BASE_URL }}/api/labs/{{ node_create_lab_name }}.unl/nodes"
    return_content: True
    headers:
      Accept: application/json
      Cookie: "{{ login.cookies_string }}"
    validate_certs: False
  register: response

- set_fact:
    telnet_port: "{{response.json.data['1'].url.split(':')[2]}}"

- name: copy file
  template: 
    src: install_image.expect.j2
    dest: /tmp/install_image.expect
    mode: "+x"

- name: run expect script
  ansible.builtin.shell: "/tmp/install_image.expect"

- name: Login to EVE-NG and get Cookie (due timeout)
  delegate_to: localhost
  uri:
    method: POST
    url: "{{ EVE_NG_BASE_URL }}/api/auth/login"
    return_content: yes
    body_format: json
    body:
      username: "{{ EVE_NG_USER }}"
      password: "{{ EVE_NG_PASSWORD}}"
      html5: "-1"
    headers:
      Accept: application/json
    validate_certs: False
  register: login

- name: stop node
  delegate_to: localhost
  uri:
    method: GET
    url: "{{ EVE_NG_BASE_URL }}/api/labs/{{ node_create_lab_name }}.unl/nodes/1/stop/stopmode=3"
    return_content: True
    headers:
      Accept: application/json
      Cookie: "{{ login.cookies_string }}"
    validate_certs: False
  register: response

- name: Pause to wait node is shutdown
  pause:
    seconds: 10

- name: commit virtioa.qcow2
  ansible.builtin.shell: | 
    cd /opt/unetlab/tmp/0/{{ lab_temp_id }}/1
    qemu-img commit virtioa.qcow2

- name: create lab for node install
  delegate_to: localhost
  uri:
    method: DELETE
    url: "{{ EVE_NG_BASE_URL }}/api/labs/{{ node_create_lab_name }}.unl"
    return_content: True
    headers:
      Accept: application/json
      Cookie: "{{ login.cookies_string }}"
    validate_certs: False
  register: response